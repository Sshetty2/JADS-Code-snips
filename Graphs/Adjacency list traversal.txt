var Graph = class{
    constructor(){
        this.adjacencyList = {};
    }

    addVertex(vertex){
        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];
    }

    addEdge(vertex1, vertex2){
        this.adjacencyList[vertex1].push(vertex2);
        this.adjacencyList[vertex2].push(vertex1);
    }
    
    removeEdge(v1, v2){
        this.adjacencyList[v1] = this.adjacencyList[v1].filter( v => v !== v2)
        this.adjacencyList[v2] = this.adjacencyList[v2].filter( v => v !== v1)
    }
    

    // colts implementation
     removeVertex(vertex) {
        while(this.adjacencyList[vertex].length) {
            const adjacentVertex = this.adjacencyList[vertex].pop();
            this.removeEdge(vertex, adjacentVertex);
           }
        delete this.adjacencyList[vertex]
        return this
     }

     depthFirstRecursive(vertex){
         let visited = {};
         let results = [];
         let adjacencyList = this.adjacencyList;
         (function DFS(vertex){
             if(!vertex) return null;
             visited[vertex] = true;
             results.push(vertex);
             adjacencyList[vertex].forEach(neighbor => {
                 if (!(visited[neighbor])) {
                     return DFS(neighbor)
                 }
             });

           })(vertex)
        return results
    }
    depthFirstIterative(vertex){
       let stack = [vertex];
       let results = [];
       let currNode = vertex;
       let visited = {}
       visited[currNode] = true
       while (stack.length) {
           console.log(`this is the stack ${stack}`)
            currNode = stack.pop()
            results.push(currNode)
            this.adjacencyList[currNode].forEach(neighbor => {
                if(!visited[neighbor]){
                    visited[neighbor] = true
                    stack.push(neighbor)
                 }    
             })  
        }
   
       return results
    }

     breadthFirstIterative(vertex){
       let queue = [vertex];
       let results = [];
       let currNode = vertex;
       let visited = {}
       visited[currNode] = true
       while (queue.length) {
           console.log(`this is the queue ${queue}`)
            currNode = queue.shift()
            results.push(currNode)
            this.adjacencyList[currNode].forEach(neighbor => {
                if(!visited[neighbor]){
                    visited[neighbor] = true
                    queue.push(neighbor)
                 }    
             })  
        }
   
       return results
    }

}

g = new Graph();

g.addVertex("A")
g.addVertex("B")
g.addVertex("C")
g.addVertex("D")
g.addVertex("E")
g.addVertex("F")


g.addEdge("A", "B")
g.addEdge("A", "C")
g.addEdge("B","D")
g.addEdge("C","E")
g.addEdge("D","E")
g.addEdge("D","F")
g.addEdge("E","F")
g.breadthFirstIterative("A")

//          A
//        /   \
//       B     C
//       |     |
//       D --- E
//        \   /
//          F